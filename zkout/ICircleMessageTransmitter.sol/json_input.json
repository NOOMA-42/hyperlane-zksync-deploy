{
  "language": "Solidity",
  "sources": {
    "contracts/middleware/liquidity-layer/interfaces/circle/ICircleMessageTransmitter.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\ninterface ICircleMessageTransmitter {\n    /**\n     * @notice Receive a message. Messages with a given nonce\n     * can only be broadcast once for a (sourceDomain, destinationDomain)\n     * pair. The message body of a valid message is passed to the\n     * specified recipient for further processing.\n     *\n     * @dev Attestation format:\n     * A valid attestation is the concatenated 65-byte signature(s) of exactly\n     * `thresholdSignature` signatures, in increasing order of attester address.\n     * ***If the attester addresses recovered from signatures are not in\n     * increasing order, signature verification will fail.***\n     * If incorrect number of signatures or duplicate signatures are supplied,\n     * signature verification will fail.\n     *\n     * Message format:\n     * Field Bytes Type Index\n     * version 4 uint32 0\n     * sourceDomain 4 uint32 4\n     * destinationDomain 4 uint32 8\n     * nonce 8 uint64 12\n     * sender 32 bytes32 20\n     * recipient 32 bytes32 52\n     * messageBody dynamic bytes 84\n     * @param _message Message bytes\n     * @param _attestation Concatenated 65-byte signature(s) of `_message`, in increasing order\n     * of the attester address recovered from signatures.\n     * @return success bool, true if successful\n     */\n    function receiveMessage(\n        bytes memory _message,\n        bytes calldata _attestation\n    ) external returns (bool success);\n\n    function usedNonces(bytes32 _nonceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=node_modules/@openzeppelin/",
      "forge-std/=lib/forge-std/src/"
    ],
    "optimizer": {
      "enabled": true,
      "mode": "3",
      "details": null,
      "fallbackToOptimizingForSize": false,
      "disableSystemRequestMemoization": true
    },
    "outputSelection": {
      "*": {
        "": [
          "metadata"
        ],
        "*": [
          "abi",
          "evm.methodIdentifiers"
        ]
      }
    },
    "libraries": {},
    "isSystem": false,
    "forceEvmla": false,
    "areLibrariesMissing": false
  }
}