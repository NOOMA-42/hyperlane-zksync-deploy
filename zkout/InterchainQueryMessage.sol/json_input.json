{
  "language": "Solidity",
  "sources": {
    "contracts/middleware/libs/InterchainQueryMessage.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\nimport {CallLib} from \"./Call.sol\";\n\n/**\n * Format of message:\n * [   0: 32] Sender address\n * [  32: 64] Message type (left padded with zeroes)\n * [  64:???] Encoded call array\n */\nlibrary InterchainQueryMessage {\n    uint256 private constant SENDER_OFFSET = 0;\n    uint256 private constant TYPE_OFFSET = 32;\n    uint256 private constant CALLS_OFFSET = 64;\n\n    enum MessageType {\n        QUERY,\n        RESPONSE\n    }\n\n    /**\n     * @notice Parses and returns the query sender from the provided message\n     * @param _message The interchain query message\n     * @return The query sender as bytes32\n     */\n    function sender(bytes calldata _message) internal pure returns (bytes32) {\n        return bytes32(_message[SENDER_OFFSET:TYPE_OFFSET]);\n    }\n\n    /**\n     * @notice Parses and returns the message type from the provided message\n     * @param _message The interchain query message\n     * @return The message type (query or response)\n     */\n    function messageType(\n        bytes calldata _message\n    ) internal pure returns (MessageType) {\n        // left padded with zeroes\n        return MessageType(uint8(bytes1(_message[CALLS_OFFSET - 1])));\n    }\n\n    /**\n     * @notice Returns formatted InterchainQueryMessage, type == QUERY\n     * @param _sender The query sender as bytes32\n     * @param _calls The sequence of queries to make, with the corresponding\n     * response callbacks\n     * @return Formatted message body\n     */\n    function encode(\n        bytes32 _sender,\n        CallLib.StaticCallWithCallback[] calldata _calls\n    ) internal pure returns (bytes memory) {\n        return abi.encode(_sender, MessageType.QUERY, _calls);\n    }\n\n    /**\n     * @notice Returns formatted InterchainQueryMessage, type == QUERY\n     * @param _sender The query sender as bytes32\n     * @param _to The address of the contract to query\n     * @param _data The calldata encoding the query\n     * @param _callback The calldata of the callback that will be made on the sender.\n     * The return value of the query will be appended.\n     * @return Formatted message body\n     */\n    function encode(\n        bytes32 _sender,\n        address _to,\n        bytes memory _data,\n        bytes memory _callback\n    ) internal pure returns (bytes memory) {\n        CallLib.StaticCallWithCallback[]\n            memory _calls = new CallLib.StaticCallWithCallback[](1);\n        _calls[0] = CallLib.build(_to, _data, _callback);\n        return abi.encode(_sender, MessageType.QUERY, _calls);\n    }\n\n    /**\n     * @notice Parses and returns the calls and callbacks from the message\n     * @param _message The interchain query message, type == QUERY\n     * @return _calls The sequence of queries to make with the corresponding\n     * response callbacks\n     */\n    function callsWithCallbacks(\n        bytes calldata _message\n    ) internal pure returns (CallLib.StaticCallWithCallback[] memory _calls) {\n        assert(messageType(_message) == MessageType.QUERY);\n        (, , _calls) = abi.decode(\n            _message,\n            (bytes32, MessageType, CallLib.StaticCallWithCallback[])\n        );\n    }\n\n    /**\n     * @notice Returns formatted InterchainQueryMessage, type == RESPONSE\n     * @param _sender The query sender as bytes32\n     * @param _calls The sequence of callbacks to make\n     * @return Formatted message body\n     */\n    function encode(\n        bytes32 _sender,\n        bytes[] memory _calls\n    ) internal pure returns (bytes memory) {\n        return abi.encode(_sender, MessageType.RESPONSE, _calls);\n    }\n\n    /**\n     * @notice Parses and returns the callbacks from the message\n     * @param _message The interchain query message, type == RESPONSE\n     * @return _calls The sequence of callbacks to make\n     */\n    function rawCalls(\n        bytes calldata _message\n    ) internal pure returns (bytes[] memory _calls) {\n        assert(messageType(_message) == MessageType.RESPONSE);\n        (, , _calls) = abi.decode(_message, (bytes32, MessageType, bytes[]));\n    }\n}\n"
    },
    "contracts/middleware/libs/Call.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport {TypeCasts} from \"../../libs/TypeCasts.sol\";\n\nlibrary CallLib {\n    struct StaticCall {\n        // supporting non EVM targets\n        bytes32 to;\n        bytes data;\n    }\n\n    struct Call {\n        // supporting non EVM targets\n        bytes32 to;\n        uint256 value;\n        bytes data;\n    }\n\n    struct StaticCallWithCallback {\n        StaticCall _call;\n        bytes callback;\n    }\n\n    function call(\n        Call memory _call\n    ) internal returns (bytes memory returnData) {\n        return\n            Address.functionCallWithValue(\n                TypeCasts.bytes32ToAddress(_call.to),\n                _call.data,\n                _call.value\n            );\n    }\n\n    function staticcall(\n        StaticCall memory _call\n    ) private view returns (bytes memory) {\n        return\n            Address.functionStaticCall(\n                TypeCasts.bytes32ToAddress(_call.to),\n                _call.data\n            );\n    }\n\n    function staticcall(\n        StaticCallWithCallback memory _call\n    ) internal view returns (bytes memory callback) {\n        return bytes.concat(_call.callback, staticcall(_call._call));\n    }\n\n    function multicall(Call[] memory calls) internal {\n        uint256 i = 0;\n        uint256 len = calls.length;\n        while (i < len) {\n            call(calls[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function multistaticcall(\n        StaticCallWithCallback[] memory _calls\n    ) internal view returns (bytes[] memory) {\n        uint256 i = 0;\n        uint256 len = _calls.length;\n        bytes[] memory callbacks = new bytes[](len);\n        while (i < len) {\n            callbacks[i] = staticcall(_calls[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        return callbacks;\n    }\n\n    function multicallto(address to, bytes[] memory calls) internal {\n        uint256 i = 0;\n        uint256 len = calls.length;\n        while (i < len) {\n            Address.functionCall(to, calls[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function build(\n        bytes32 to,\n        bytes memory data\n    ) internal pure returns (StaticCall memory) {\n        return StaticCall(to, data);\n    }\n\n    function build(\n        address to,\n        bytes memory data\n    ) internal pure returns (StaticCall memory) {\n        return build(TypeCasts.addressToBytes32(to), data);\n    }\n\n    function build(\n        bytes32 to,\n        uint256 value,\n        bytes memory data\n    ) internal pure returns (Call memory) {\n        return Call(to, value, data);\n    }\n\n    function build(\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal pure returns (Call memory) {\n        return Call(TypeCasts.addressToBytes32(to), value, data);\n    }\n\n    function build(\n        bytes32 to,\n        bytes memory data,\n        bytes memory callback\n    ) internal pure returns (StaticCallWithCallback memory) {\n        return StaticCallWithCallback(build(to, data), callback);\n    }\n\n    function build(\n        address to,\n        bytes memory data,\n        bytes memory callback\n    ) internal pure returns (StaticCallWithCallback memory) {\n        return StaticCallWithCallback(build(to, data), callback);\n    }\n}\n"
    },
    "node_modules/@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/libs/TypeCasts.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=node_modules/@openzeppelin/",
      "forge-std/=lib/forge-std/src/"
    ],
    "optimizer": {
      "enabled": true,
      "mode": "3",
      "details": null,
      "fallbackToOptimizingForSize": false,
      "disableSystemRequestMemoization": true
    },
    "outputSelection": {
      "*": {
        "": [
          "metadata"
        ],
        "*": [
          "abi",
          "evm.methodIdentifiers"
        ]
      }
    },
    "libraries": {},
    "isSystem": false,
    "forceEvmla": false,
    "areLibrariesMissing": false
  }
}