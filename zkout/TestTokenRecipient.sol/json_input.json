{
  "language": "Solidity",
  "sources": {
    "contracts/test/TestTokenRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\nimport {ILiquidityLayerMessageRecipient} from \"../interfaces/ILiquidityLayerMessageRecipient.sol\";\n\ncontract TestTokenRecipient is ILiquidityLayerMessageRecipient {\n    bytes32 public lastSender;\n    bytes public lastData;\n    address public lastToken;\n    uint256 public lastAmount;\n\n    address public lastCaller;\n    string public lastCallMessage;\n\n    event ReceivedMessage(\n        uint32 indexed origin,\n        bytes32 indexed sender,\n        string message,\n        address token,\n        uint256 amount\n    );\n\n    event ReceivedCall(address indexed caller, uint256 amount, string message);\n\n    function handleWithTokens(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _data,\n        address _token,\n        uint256 _amount\n    ) external override {\n        emit ReceivedMessage(_origin, _sender, string(_data), _token, _amount);\n        lastSender = _sender;\n        lastData = _data;\n        lastToken = _token;\n        lastAmount = _amount;\n    }\n\n    function fooBar(uint256 amount, string calldata message) external {\n        emit ReceivedCall(msg.sender, amount, message);\n        lastCaller = msg.sender;\n        lastCallMessage = message;\n    }\n}\n"
    },
    "contracts/interfaces/ILiquidityLayerMessageRecipient.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\ninterface ILiquidityLayerMessageRecipient {\n    function handleWithTokens(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message,\n        address _token,\n        uint256 _amount\n    ) external;\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=node_modules/@openzeppelin/",
      "forge-std/=lib/forge-std/src/"
    ],
    "optimizer": {
      "enabled": true,
      "mode": "3",
      "details": null,
      "fallbackToOptimizingForSize": false,
      "disableSystemRequestMemoization": true
    },
    "outputSelection": {
      "*": {
        "": [
          "metadata"
        ],
        "*": [
          "abi",
          "evm.methodIdentifiers"
        ]
      }
    },
    "libraries": {},
    "isSystem": false,
    "forceEvmla": false,
    "areLibrariesMissing": false
  }
}